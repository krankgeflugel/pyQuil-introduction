
# Some notes on Python before we start. 
# An object is a particular instance of a class. In this case (pyquil) we have the class Program, 
# where each -program- we define is an object, i.e. an instance of the class.
# 
# Functions are defined independently of ojects, I can define a new function, which can accept data
# and return data. They are called by name.
# 
# Methods, are functions associated to an object. When I code Program.inst(...) I am calling a method
# associated to the object Program. 
# 
# These are key differences we should learn first.
#
# In the following simple lines of code, I have mostly followed the instructions from the official pyQuil
# documentation from Rigetti. I have however added few comments, that I hope can be useful for new users.
# Note, this .py file comes from a Jupyter Notebook, hence the # In[x] headers. I suggest you use Jupyter
# to run this code, and also for your future projects.

# In[1]:

import pyquil.quil as pq
import pyquil.api as api
from pyquil.gates import *
import numpy as np


# In[9]:

# First step: a qvm is a quantum virtual machine.
# The first thing we do is to open a synchronous connection with the QVM
# this allows us to connect with it directly, however it runs out jobs
# that take more than 30 seconds, so it is good for quick checks.

qvm = api.SyncConnection()


# In[10]:

# The main objects of pyquil are Program(s): 
# pq is the name for pyquil, and we use the method 'inst' to add elements
# to an object program. It is good to learn these names and concepts.

p = pq.Program()

# I add a Pauli-X gate to the [0] qubit, then I call the 'measure' method to
# measure the [0] qubit and save the outcome in the [0] classical register.
p.inst(X(0)).measure(0, 0)


# In[12]:

# Let me have a look at the program
print(p)


# In[13]:

classical_regs = [0] # A list of which classical registers to return the values of.

# Now I use the run method to run the program on the qvm
qvm.run(p, classical_regs)


# In[18]:

# Let me try some variations of the same things
classical_regs_v2 = [0,1,2] # NOTE: I am defining a register composed of 3 registers, [0], [1], [2]
qvm.run(p, classical_regs_v2)
# Outcome: Only the first register gets the outcome of the measurement, the others are 
# initiated to zero and left untouched.


# In[21]:

# Check this to understand better:

p=pq.Program() #clear the old program
p.inst(X(0)).measure(0,1)
qvm.run(p, classical_regs_v2)

# Now I save the outcome in the second classical register, i.e. [1]


# In[24]:

# Let me try another simple variation
coin_flip = pq.Program()
coin_flip.inst(H(0)).measure(0,0)
toss = 5
outcomes = qvm.run(coin_flip, classical_regs, toss) #repeat the experiment 5 times
print(outcomes)


# In[29]:

# Note that outcomes is a valid list, which is great
outcomes[1]


# In[31]:

# What is great about pyquil, is that we can write down explicitely the wave function
had = pq.Program().inst(H(0))
wf_had = qvm.wavefunction(had) # This is a tuple, the first element is a Wavefunction object


# In[38]:

# We can print the Wavefunction object
print(wf_had[0])


# In[46]:

# We can extract the amplitudes from the Wavefuntion object
wf_had_obj , _ = wf_had  # Just extract the first element of the Tuple


# In[51]:

wf_had_obj.amplitudes # They are stored as a numpy array


# In[66]:

print(wf_had_obj.amplitudes) # Print them as a numpy array


# In[55]:

prob_dict = wf_had_obj.get_outcome_probs()
prob_dict # Now I have extracted the PROBABILITIES (not amplitudes) as a dictionary object


# In[59]:

prob_dict.keys() # These are the possible outcomes of the measurements


# In[57]:

len(wf_had_obj)
# The length of the wavefunction tells me how many qubits 


# In[85]:

# The second element returned from a wavefunction call is an optional amount of classical memory to check:
coin_flip = pq.Program().inst(H(0)).measure(0,0)
wavf, classical_mem = qvm.wavefunction(coin_flip, classical_addresses=list(range(9))) 
# Remember difference for the range() function in Python 2. and Python 3.!! I got it wrong first time


# In[86]:

classical_mem


# In[93]:

# Additionally, we can pass a random seed to the Connection object. 
# This allows us to reliably reproduce measurement results for the purpose of testing:
qvm_seed = api.SyncConnection(random_seed=3)
coin_flip = pq.Program().inst(H(0)).measure(0,0)
toss = 5
print(qvm_seed.run(coin_flip, [0], toss))
#
# Try again, should get the same outcomes
qvm_seed = api.SyncConnection(random_seed=3)
coin_flip = pq.Program().inst(H(0)).measure(0,0)
toss = 5
print(qvm_seed.run(coin_flip, [0], toss))


# In[90]:

# A shorter version of the same test (without redefining everything everytime)
seeded_cxn = api.SyncConnection(random_seed=17)
print(seeded_cxn.run(pq.Program().inst(H(0)).measure(0, 0), [0], 20))

seeded_cxn = api.SyncConnection(random_seed=17)
# This will give identical output to the above
print(seeded_cxn.run(pq.Program(H(0)).measure(0, 0), [0], 20))


# In[94]:

# Amazing examples of multiple instructions: Circuit building logic

print("Multiple inst arguments with final measurement:")
print(pq.Program().inst(X(0), Y(1), Z(0)).measure(0, 1))

print("Chained inst with explicit MEASURE instruction:")
print(pq.Program().inst(X(0)).inst(Y(1)).measure(0, 1).inst(MEASURE(1, 2)))

print("A mix of chained inst and measures:")
print(pq.Program().inst(X(0)).measure(0, 1).inst(Y(1), X(0)).measure(0, 0))

print("A composition of two programs:")
print(pq.Program(X(0)) + pq.Program(Y(0)))


# In[114]:

# Let me try to run something similar to the third instance
test_program = pq.Program().inst(H(0),Y(1)).measure(0,0).inst(H(0)).measure(0,0).measure(1,1)
print(test_program)


# In[122]:

cla_add = [0,1]
print(qvm.run(test_program,cla_add,3))


# In[130]:

print(qvm.wavefunction(test_program)[0])


# In[132]:

# Another little example
print(qvm.wavefunction(pq.Program().inst(H(0)).inst(Z(0)))[0])


# In[133]:

# If an instruction was appended to a program incorrectly, one can pop it off.
p = pq.Program().inst(X(0))
p.inst(Y(1))
print("Oops! We have added Y 1 by accident:")
print(p)

print("We can fix by popping:")
p.pop()
print(p)

print("And then add it back:")
p += pq.Program(Y(1))
print(p)


# In[139]:

# I want to test a CZ gate 
cz_c = pq.Program().inst(H(0),H(1)).inst(CZ(0,1)).measure(0,0).measure(1,1)
print(cz_c)


# In[142]:

print(qvm.run(cz_c, [0,1], 3))


# In[149]:

# With quil (using numpy) one can easily create tensor products of gates, let me try.
# We first define a new gate, \sqrt{X}
sqrt_X = np.array([[ 0.5+0.5j,  0.5-0.5j],
                [ 0.5-0.5j,  0.5+0.5j]])
# We then tensor product this gate on qubit 1, 2
sq_XX = np.kron(sqrt_X, sqrt_X)
# Define the gate within a program
p = pq.Program()
p.defgate("SQ_XX", sq_XX) # To name a gate you need a "xxx" string
p.inst(("SQ_XX",0,1))  ## ATTENTION! Note how the .inst method works with newly defined gates


# In[150]:

print(p)


# In[152]:

p.measure(0,0).measure(1,1)
qvm.run(p, [0,1], 3)


# In[156]:

# I believe quil does a very funny thing, counts the qubits from right to left in the ket notation
p = pq.Program().inst(I(0),I(1),X(2))
print(qvm.wavefunction(p)[0])
p = pq.Program().inst(X(0),I(1),I(2))
print(qvm.wavefunction(p)[0])


# In[171]:

# Let me define a function to make a program that then computes the QFT on 3 qubits
from math import pi

def qft3(q0,q1,q2):
    p = pq.Program()
    p.inst(H(q2),
           CPHASE(pi/2.0 , q1, q2),
           H(q1),CPHASE(pi/4.0, q0, q2),
           CPHASE(pi/2.0, q0, q1),
           H(q0),
           SWAP(q0,q2))
    return p


# In[172]:

print(qft3(0,1,2))


# In[173]:

# Let me prepare the initial state --> I want |001>, with the first qubit in |1>
state_prep = pq.Program().inst(X(0),I(1),I(2))


# In[175]:

wavf, _ = qvm.wavefunction(state_prep)
print(wavf)
# Perfect


# In[181]:

wavf, _ = qvm.wavefunction(state_prep + qft3(0,1,2))
print(wavf)


# In[185]:

# Verufy if this is correct
from numpy.fft import ifft
# I have to write the vector to (inverse) fft as the state vector of the initial |001> Rigetti-state (which is |100>)
print(ifft([0,1,0,0,0,0,0,0], norm="ortho"))


# In[ ]:




# In[191]:

# We can introduce noise, in form of Pauli matrices applied AFTER a gate or BEFORE a measurement
# These are the gate noise and measurement noise

gate_noise_probs = [0.1, 0.1, 0.1] # Error of a X,Y,Z gate AFTER gate
meas_noise_probs = [0.1, 0.1, 0.1] # Error of a X,Y,Z gate BEFORE measurement
noisy_qvm = api.SyncConnection(gate_noise=gate_noise_probs, measurement_noise=meas_noise_probs)


# In[192]:

# Let's test this
p = pq.Program().inst(X(0)).measure(0,0)


# In[201]:

print("Without noise: {}".format(qvm.run(p,[0],20)))
print("With noise: {}".format(noisy_qvm.run(p, [0], 20)))
# You can now appreciate the difference between the two runs of the same program


